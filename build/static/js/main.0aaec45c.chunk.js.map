{"version":3,"sources":["reducers/messageReducer.js","reducers/userReducer.js","reducers/authReducer.js","reducers/rootReducer.js","actions/types.js","serviceWorker.js","components/Header/Header.jsx","environment/firebaseConfig.js","firebase/firebaseInit.js","actions/actions.js","components/LoginPage/LoginPage.jsx","actions/actionCreators.js","components/Message/Message.jsx","components/MessagesList/MessagesList.jsx","components/MainPage/MainPage.jsx","App.js","components/RouterComponent/RouterComponent.jsx","index.js"],"names":["INITIAL_STATE","messages","nickname","isAuthenticated","combineReducers","messageReducer","state","action","type","payload","userReducer","authReducer","Boolean","window","location","hostname","match","Header","text","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","firebaseConfig","firebaseInit","firestore","connect","authenticateUser","data","dispatch","username","password","authenticateUserProps","useState","setUsername","setPassword","handleChange","event","target","name","value","className","TextField","variant","color","placeholder","onChange","Button","onClick","Message","body","socket","styleX","id","message","MessagesList","map","index","messagesFromStore","saveNewMessageToStore","a","saveNewMessageProps","input","document","querySelector","setMessage","useEffect","on","scrollIntoView","behavior","focus","handleClick","preventDefault","emit","style","width","backgroundColor","borderRadius","overflow","marginTop","autoFocus","height","App","console","log","openSocket","path","component","LoginPage","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0aaec45c.chunk.js","sourcesContent":["import { NEW_MESSAGE } from '../actions/types';\n\nconst INITIAL_STATE = {\n    messages: []\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch(action.type) {\n        case NEW_MESSAGE:\n            return {\n                ...state,\n                messages: [...state.messages, action.payload]\n            }\n        default:\n            return state\n    }\n}","import { NEW_USER } from '../actions/types';\n\nconst INITIAL_STATE = {\n    nickname: null\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case NEW_USER:\n            return {\n                ...state,\n                nickname: action.payload\n            }\n        default:\n            return state\n    }\n}","import { CORRECT_CREDENTIALS, INCORRECT_CREDENTIALS } from '../actions/types';\n\nconst INITIAL_STATE = {\n    isAuthenticated: false\n}\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case CORRECT_CREDENTIALS:\n            return {\n                ...state,\n                isAuthenticated: true\n            }\n        case INCORRECT_CREDENTIALS:\n            return {\n                ...state,\n                isAuthenticated: false\n            }\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux';\nimport messageReducer from './messageReducer';\nimport userReducer from './userReducer';\nimport authReducer from './authReducer';\n\nexport default combineReducers({\n    messageReducer,\n    userReducer,\n    authReducer\n});\n","export const NEW_MESSAGE = 'NEW_MESSAGE';\n\nexport const NEW_USER = 'NEW_USER';\n\nexport const CORRECT_CREDENTIALS = 'CORRECT_CREDENTIALS';\nexport const INCORRECT_CREDENTIALS = 'INCORRECT_CREDENTIALS';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Header = ({ text }) => (\n    <h1>{text}</h1>\n);\n\nexport default Header;","export default {\n    apiKey: \"AIzaSyBlNClU90Ig-mA4pQVzvxLU7g1gl2rPm5E\",\n    authDomain: \"dzbany-d76f4.firebaseapp.com\",\n    databaseURL: \"https://dzbany-d76f4.firebaseio.com\",\n    projectId: \"dzbany-d76f4\",\n    storageBucket: \"dzbany-d76f4.appspot.com\",\n    messagingSenderId: \"376391984639\",\n    appId: \"1:376391984639:web:ef22027b73885753fff3ca\"\n};\n","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport firebaseConfig from '../environment/firebaseConfig';\n\nconst firebaseInit = () => {\n    firebase.initializeApp(firebaseConfig);\n};\n\nexport default firebaseInit;\n","import { saveNewMessageActionCreator, authenticateUserActionCreator } from './actionCreators';\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\nimport firebaseInit from '../firebase/firebaseInit';\nconst usernameAuth = 'username';\nconst passwordAuth = 'password';\n\nfirebaseInit();\nconst messagesPath = 'dzbany/messages/messages';\n\nexport const firestore = firebase.firestore();\nexport const saveNewMessageToStore = data => async dispatch => {\n    dispatch(saveNewMessageActionCreator(data))\n};\n\nexport const saveNewMessageToDatabse = async data => {\n    firestore\n        .collection(messagesPath)\n        .add(data)\n        .catch(error => {\n            throw new Error(`Error saving to database: ${error}`);\n        });\n}\n\nexport const authenticateUser = data => dispatch => {\n    const { username, password } = data;\n    const correctCredentials = username === usernameAuth && password === passwordAuth;\n    dispatch(authenticateUserActionCreator(correctCredentials));\n};\n","import React, { useState } from 'react';\nimport Header from '../Header/Header';\nimport { connect } from 'react-redux';\nimport { TextField, Button } from '@material-ui/core';\nimport { authenticateUser } from '../../actions/actions';\nimport './LoginPage.css';\n\nconst LoginPage = ({ authenticateUser: authenticateUserProps }) => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        switch (name) {\n            case 'username':\n                setUsername(value);\n                break;\n            case 'password':\n                setPassword(value);\n                break;\n            default:\n                break;\n        }\n    };\n    const handleClick = () => {\n        authenticateUserProps({ username, password });\n    };\n    return (\n        <div className='login-page'>\n            <div className='header-container'>\n                <Header text={'Login Page'} />\n            </div>\n            <div className='input-container'>\n                <div className='username-container'>\n                    <TextField\n                        variant='outlined'\n                        color='primary'\n                        placeholder='username'\n                        name='username'\n                        onChange={(event) => handleChange(event)}\n                    />\n                </div>\n                <div className='password-container'>\n                    <TextField\n                        variant='outlined'\n                        color='primary'\n                        placeholder='password'\n                        name='password'\n                        onChange={(event) => handleChange(event)}\n                    />\n                </div>\n            </div>\n            <div className='button-container'>\n                <Button\n                    variant='outlined'\n                    color='primary'\n                    onClick={handleClick}\n                >\n                    Login\n                </Button>\n            </div>\n        </div>\n    )\n};\n\nexport default connect(\n    null,\n    { authenticateUser }\n)(LoginPage);","import { NEW_MESSAGE, CORRECT_CREDENTIALS, INCORRECT_CREDENTIALS } from './types';\n\n/**\n * Saves new message object to store.\n * @param {Object.<string, string>} payload - message data: { message: 'message content', id: 'socket id'}\n */\nexport const saveNewMessageActionCreator = payload => {\n    return {\n        type: NEW_MESSAGE,\n        payload\n    }\n};\n\nexport const authenticateUserActionCreator = payload => {\n    return payload ? {\n        type: CORRECT_CREDENTIALS,\n        payload\n    } : {\n            type: INCORRECT_CREDENTIALS,\n            payload\n        }\n};\n","import React from 'react';\nimport './Message.css';\n\nconst Message = ({ body, socket }) => {\n    const styleX = body.id === socket.id ? 'own' : '';\n    return (\n        <div className='message-wrapper'>\n            <div className={`message ${styleX}`}>{`${body.id}: ${body.message}`}</div>\n        </div>\n    )\n};\n\nexport default Message;","import React from 'react';\nimport Message from '../Message/Message';\nimport PropTypes from 'prop-types';\n\nconst MessagesList = ({ messages, socket }) => {\n    return (\n        messages.map((message, index) => (\n            <Message body={message} id={index} socket={socket} />\n        ))\n    )\n}\n\nMessagesList.propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string,\n        message: PropTypes.string\n    })),\n    socket: PropTypes.object\n}\n\nexport default MessagesList;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { TextField, Button } from '@material-ui/core';\nimport { saveNewMessageToStore, /*saveNewMessageToDatabse*/ } from '../../actions/actions';\nimport Header from '../Header/Header';\nimport MessagesList from '../MessagesList/MessagesList';\nimport './MainPage.css';\n\nconst MainPage = ({ messagesFromStore, socket, saveNewMessageToStore: saveNewMessageProps }) => {\n    const input = document.querySelector('#message');\n    const [message, setMessage] = useState('');\n    /**\n     * Listens to event from server and saves received message to store.\n     */\n    useEffect(() => {\n        socket.on('new-message-from-server', (data) => {\n            saveNewMessageProps(data);\n        });\n    }, [socket, saveNewMessageProps]);\n\n    /**\n     * Handles scrolling to bottom when messages extend outside div.\n     */\n    useEffect(() => {\n        const conversationEnd = document.querySelector('#end-of-conversation');\n        conversationEnd.scrollIntoView({ behavior: 'smooth' });\n    }, [messagesFromStore]);\n\n    /**\n     * Checks if the message is empty.\n     */\n    const isMessageNotEmpty = () => {\n        return !!message;\n    }\n    /**\n     * Setting focus on input after each render.\n     */\n    input && input.focus();\n\n    /**\n     * Clearing state.message after submitting.\n     */\n    const clearMessage = () => {\n        setMessage('');\n    };\n\n    /**\n     * Handles onChange events.\n     * @param {Object} event HTML event object.\n     */\n    const handleChange = (event) => {\n        setMessage(event.target.value);\n    };\n\n    /**\n     * Handles onClick events.\n     * @param {Object} event HTML event object.\n     */\n    const handleClick = (event) => {\n        event.preventDefault();\n        if (isMessageNotEmpty()) {\n            const { id } = socket;\n            const data = { message, id };\n            //saveNewMessageToDatabse(data);\n            saveNewMessageProps(data);\n            socket.emit('new-message-from-client', data)\n            clearMessage();\n        }\n    };\n\n    return (\n        <div className='main-page'>\n            <Header text={'Chat'} />\n            <div id='conversation'>\n                <MessagesList messages={messagesFromStore} socket={socket} />\n                <div className='message-container'>\n                    <div id='end-of-conversation'></div>\n                </div>\n            </div>\n            <div className='input-container'>\n                <TextField\n                    style={{\n                        width: '55%',\n                        backgroundColor: 'white',\n                        borderRadius: 'none',\n                        overflow: 'hidden',\n                        marginTop: '-2px',\n                    }}\n                    variant='outlined'\n                    color='primary'\n                    name='message'\n                    id='message'\n                    autoFocus\n                    value={message}\n                    onChange={(event) => handleChange(event)}\n                    placeholder='Start typing...'\n                />\n                <Button\n                    style={{\n                        height: '57px',\n                        marginTop: '-2px',\n                        backgroundColor: 'white',\n                        borderRadius: 'none'\n                    }}\n                    variant='outlined'\n                    color='primary'\n                    name='send'\n                    id='send-message'\n                    onClick={(event) => handleClick(event)}\n                >\n                    Send message\n                </Button>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    messagesFromStore: state.messageReducer.messages\n})\n\nMainPage.propTypes = {\n    messagesFromStore: PropTypes.array,\n    socket: PropTypes.object,\n    saveNewMessage: PropTypes.func\n}\n\nexport default connect(\n    mapStateToProps,\n    { saveNewMessageToStore }\n)(MainPage);","import React, { useEffect } from 'react';\nimport MainPage from './components/MainPage/MainPage';\n\nfunction App({ socket }) {\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('User Connected');\n    });\n  }, [socket]);\n  return (\n    <MainPage socket={socket} />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport LoginPage from '../LoginPage/LoginPage';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport openSocket from 'socket.io-client';\nimport PropTypes from 'prop-types';\nimport App from '../../App';\n\nconst socket = openSocket('localhost:5000');\n\nconst RouterComponent = ({ isAuthenticated }) => {\n    return (\n        <Router>\n            <Switch>\n                {isAuthenticated ?\n                    <Route path='*' component={() => <App socket={socket} />} />\n                    :\n                    <Route path='*' component={LoginPage} />\n                }\n            </Switch>\n        </Router>\n    )\n};\n\nconst mapStateToProps = state => ({\n    isAuthenticated: state.authReducer.isAuthenticated\n});\n\nRouterComponent.propTypes = {\n    isAuthenticated: PropTypes.bool\n};\n\nexport default connect(\n    mapStateToProps,\n    null\n)(RouterComponent);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers/rootReducer';\nimport * as serviceWorker from './serviceWorker';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport RouterComponent from './components/RouterComponent/RouterComponent';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n    <Provider store={store} >\n        <RouterComponent />\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}