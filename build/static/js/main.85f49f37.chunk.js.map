{"version":3,"sources":["components/Message/Message.jsx","environment/firebaseConfig.js","firebase/firebaseInit.js","actions/actions.js","components/MainPage/MainPage.jsx","actions/actionCreators.js","actions/types.js","App.js","reducers/messageReducer.js","reducers/userReducer.js","reducers/rootReducer.js","serviceWorker.js","components/Socket/Socket.jsx","index.js"],"names":["Message","body","socket","styleX","id","className","message","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","firebaseConfig","firebaseInit","firestore","connect","state","messagesFromStore","messageReducer","messages","saveNewMessageToStore","data","dispatch","a","type","payload","saveNewMessageProps","input","document","querySelector","useState","setMessage","console","log","useEffect","on","focus","handleClick","event","preventDefault","emit","map","messageFromHook","index","key","TextField","style","width","backgroundColor","borderRadius","overflow","marginTop","variant","color","name","autoFocus","value","onChange","target","handleChange","placeholder","Button","height","onClick","App","INITIAL_STATE","nickname","combineReducers","action","userReducer","Boolean","window","location","hostname","match","Socket","children","propTypes","PropTypes","object","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","openSocket","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85f49f37.chunk.js","sourcesContent":["import React from 'react';\nimport './Message.css';\n\nconst Message = ({ body, socket }) => {\n    const styleX = body.id === socket.id ? 'own' : '';\n    return (\n        <div className='message-wrapper'>\n            <div className={`message ${styleX}`}>{`${body.id}: ${body.message}`}</div>\n        </div>\n    )\n};\n\nexport default Message;","export default {\n    apiKey: \"AIzaSyBlNClU90Ig-mA4pQVzvxLU7g1gl2rPm5E\",\n    authDomain: \"dzbany-d76f4.firebaseapp.com\",\n    databaseURL: \"https://dzbany-d76f4.firebaseio.com\",\n    projectId: \"dzbany-d76f4\",\n    storageBucket: \"dzbany-d76f4.appspot.com\",\n    messagingSenderId: \"376391984639\",\n    appId: \"1:376391984639:web:ef22027b73885753fff3ca\"\n};\n","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport firebaseConfig from '../environment/firebaseConfig';\n\nconst firebaseInit = () => {\n    firebase.initializeApp(firebaseConfig);\n};\n\nexport default firebaseInit;\n","import { saveNewMessageActionCreator } from './actionCreators';\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\nimport firebaseInit from '../firebase/firebaseInit';\n\nfirebaseInit();\nconst messagesPath = 'dzbany/messages/messages';\n\nexport const firestore = firebase.firestore();\nexport const saveNewMessageToStore = data => async dispatch => {\n    dispatch(saveNewMessageActionCreator(data))\n};\n\nexport const saveNewMessageToDatabse = async data => {\n    firestore\n        .collection(messagesPath)\n        .add(data)\n        .catch(error => {\n            throw new Error(`Error saving to database: ${error}`);\n        });\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Message from '../Message/Message';\nimport { connect } from 'react-redux';\nimport { TextField, Button } from '@material-ui/core';\nimport { saveNewMessageToStore, saveNewMessageToDatabse } from '../../actions/actions';\nimport './MainPage.css';\n\nconst MainPage = ({ messagesFromStore, socket, saveNewMessageToStore: saveNewMessageProps }) => {\n    const input = document.querySelector('#message');\n    const [message, setMessage] = useState('');\n\n    console.log('invoked');\n    /**\n     * Listens to event from server and saves received message to store.\n     */\n    useEffect(() => {\n        socket.on('new-message-from-server', (data) => {\n            saveNewMessageProps(data);\n        });\n    }, [socket, saveNewMessageProps]);\n\n    /**\n     * Checks if the message is empty.\n     */\n    const isMessageNotEmpty = () => {\n        return !!message;\n    }\n    /**\n     * Setting focus on input after each render.\n     */\n    input && input.focus();\n\n    /**\n     * Clearing state.message after submitting.\n     */\n    const clearMessage = () => {\n        setMessage('');\n    };\n\n    /**\n     * Handles onChange events.\n     * @param {Object} event HTML event object.\n     */\n    const handleChange = (event) => {\n        setMessage(event.target.value);\n    };\n\n    /**\n     * Handles onClick events.\n     * @param {Object} event HTML event object.\n     */\n    const handleClick = (event) => {\n        event.preventDefault();\n        if (isMessageNotEmpty()) {\n            const { id } = socket;\n            const data = { message, id };\n            //saveNewMessageToDatabse(data);\n            saveNewMessageProps(data);\n            socket.emit('new-message-from-client', data)\n            clearMessage();\n        }\n    };\n\n    return (\n        <div className='main-page'>\n            <h1>Chat</h1>\n            <div id='conversation'>\n                {messagesFromStore.map((messageFromHook, index) => (\n                    <Message body={messageFromHook} key={index} socket={socket} />\n                ))}\n            </div>\n            <div className='input-container'>\n                <TextField\n                    style={{\n                        width: '55%',\n                        backgroundColor: 'white',\n                        borderRadius: 'none',\n                        overflow: 'hidden',\n                        marginTop: '-2px',\n                    }}\n                    variant='outlined'\n                    color='primary'\n                    name='message'\n                    id='message'\n                    autoFocus\n                    value={message}\n                    onChange={(event) => handleChange(event)}\n                    placeholder='Start typing...'\n                />\n                <Button\n                    style={{\n                        height: '57px',\n                        marginTop: '-2px',\n                        backgroundColor: 'white',\n                        borderRadius: 'none'\n                    }}\n                    variant='outlined'\n                    color='primary'\n                    name='send'\n                    id='send-message'\n                    onClick={(event) => handleClick(event)}\n                >\n                    Send message\n                </Button>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    messagesFromStore: state.messageReducer.messages\n})\n\nMainPage.propTypes = {\n    messagesFromStore: PropTypes.array,\n    socket: PropTypes.object,\n    saveNewMessage: PropTypes.func\n}\n\nexport default connect(\n    mapStateToProps,\n    { saveNewMessageToStore }\n)(MainPage);","import { NEW_MESSAGE } from './types';\n\n/**\n * Saves new message object to store.\n * @param {Object.<string, string>} payload - message data: { message: 'message content', id: 'socket id'}\n */\nexport const saveNewMessageActionCreator = payload => {\n    return {\n        type: NEW_MESSAGE,\n        payload\n    }\n};\n","export const NEW_MESSAGE = 'NEW_MESSAGE';\n\nexport const NEW_USER = 'NEW_USER';","import React from 'react';\nimport MainPage from './components/MainPage/MainPage';\n\nfunction App({ socket }) {\n  return (\n    <MainPage socket={socket} />\n  );\n}\n\nexport default App;\n","import { NEW_MESSAGE } from '../actions/types';\n\nconst INITIAL_STATE = {\n    messages: []\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch(action.type) {\n        case NEW_MESSAGE:\n            return {\n                ...state,\n                messages: [...state.messages, action.payload]\n            }\n        default:\n            return state\n    }\n}","import { NEW_USER } from '../actions/types';\n\nconst INITIAL_STATE = {\n    nickname: null\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case NEW_USER:\n            return {\n                ...state,\n                nickname: action.payload\n            }\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux';\nimport messageReducer from './messageReducer';\nimport userReducer from './userReducer';\n\nexport default combineReducers({\n    messageReducer,\n    userReducer\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import PropTypes from 'prop-types';\n\nconst Socket = ({ children, socket }) => {\n    socket.on('connect', () => {\n        console.log('Socket connected');\n    });\n    return [children];\n};\n\nSocket.propTypes = {\n    children: PropTypes.object,\n    socket: PropTypes.object\n}\n\nexport default Socket;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport App from './App';\nimport rootReducer from './reducers/rootReducer';\nimport * as serviceWorker from './serviceWorker';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport openSocket from 'socket.io-client';\nimport Socket from './components/Socket/Socket';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\nconst socket = openSocket('https://dzbany-server.herokuapp.com/80');\n\nReactDOM.render(\n    <Provider store={store} >\n        <Socket socket={socket}>\n            <App socket={socket} />\n        </Socket>\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}